<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var networkType = network_socket_tcp;
var port = 50000;
var maxPlayers = 32;
var bufferSize = 1024;
var bufferType = buffer_fixed;
var bufferAlignment = 1;

server = network_create_server(networkType, port, maxPlayers);
global.buffer = buffer_create(bufferSize, bufferType, bufferAlignment);

global.players = ds_list_create();
playerIdCounter = 0;

//just for display purposes
with (obj_message)
{
    instance_destroy();
}

var notification = instance_create(0, 0, obj_message);
notification.message = "Server is up!";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var eventType = ds_map_find_value(async_load, "type");
switch(eventType)
{
    case network_type_connect://when a player connects
        var socket = ds_map_find_value(async_load, "socket");
        
        playerIdCounter++;
        
        var pId = playerIdCounter;
        
        // Create the player
        with (instance_create(0, 0, obj_player)) {
            playerIdentifier = pId;
            playerName = "";
            playerInGame = false;
            playerSocket = socket;
        }
        
        ds_list_add(global.players, socket);
        
        // Send player id
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_u8, 4);
        buffer_write(global.buffer, buffer_u32, playerIdCounter);
        network_send_packet(socket, global.buffer, buffer_tell(global.buffer));
        
        //just for display purposes ^^
        with (obj_message) {
            instance_destroy();
        }
        
        var notification = instance_create(0, 0, obj_message);
        notification.message = "A new player has connected!";
    break;
    
    case network_type_disconnect://when a player disconnects
        var socket = ds_map_find_value(async_load, "socket");
        var index = ds_list_find_index(global.players, socket);
        if (index != -1) {
            ds_list_delete(global.players, index);
        }
        
        // Get some info about this player leaving
        var playerLeavingId = 0;
        
        with (obj_player) {
            if (playerSocket == socket) {
                playerLeavingId = playerIdentifier;
            }
        }
        
        // Notify all players
        for (var i = 0; i &lt; ds_list_size(global.players); i++) {
            var storedPlayerSocket = ds_list_find_value(global.players, i);
            
            buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_u8, 5);
        buffer_write(global.buffer, buffer_u32, playerLeavingId);
        network_send_packet(storedPlayerSocket, global.buffer, buffer_tell(global.buffer));
        }
        
        with (obj_player) {
            if (playerIdentifier == playerLeavingId) {
                instance_destroy();
            }
        }
        
        //just for display purposes ^^
        with (obj_message) {
            instance_destroy();
        }
        
        var notification = instance_create(0, 0, obj_message);
        notification.message = "A player has left!";
    break;
    
    case network_type_data://when we receive data from a client
        var buffer = ds_map_find_value(async_load, "buffer");//ceate a read buffer and store incoming information in it
        var socket = ds_map_find_value(async_load, "id");//grab the socket of the player sending the data
        buffer_seek(buffer, buffer_seek_start, 0);//seek to the beginning of the newly created read buffer
        scr_handleIncomingPackets(buffer, socket);//pass this buffer and the player's socket to our helpful script;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//destroy serve, write buffer and all sockets
network_destroy(server);
buffer_delete(global.buffer);
ds_list_destroy(sockets);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_white);
draw_set_valign(fa_middle);
draw_text(5, 5, "Server status: " + string(server &gt;= 0));
draw_text(5, 20, "Total clients: " + string(ds_list_size(global.players)));

var xx = room_width / 2;
var yy = 150;

with (obj_player) {
    draw_text(xx, yy, playerIdentifier);
    draw_text(xx, yy + 20, playerName);
    draw_text(xx, yy + 40, playerInGame);
}

yy += 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
